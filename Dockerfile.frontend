# Stage 1: Build the React application using a Node.js image
FROM node:18-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and install dependencies. Using `npm ci` is generally
# faster and more reliable for automated builds than `npm install`.
COPY package.json ./
RUN npm install

# Copy the rest of the application source code into the container
COPY . .

# Run the build script defined in your package.json (`tsc && vite build`)
# This will create a 'dist' folder with all the static production assets.
RUN npm run build

# Stage 2: Serve the application with a lightweight Nginx server
FROM nginx:stable-alpine

# Copy the custom Nginx configuration file. This will replace the default one.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the static assets from the 'builder' stage's /app/dist directory
# into the Nginx public HTML directory.
COPY --from=builder /app/dist /usr/share/nginx/html

# Expose port 80 to allow traffic to the Nginx server
EXPOSE 80

# The default Nginx command `nginx -g 'daemon off;'` will run automatically
# when the container starts, launching the web server.
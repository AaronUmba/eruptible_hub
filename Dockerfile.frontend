# --- STAGE 1: The Builder ---
# Start with a Node.js image to build our React code. 'alpine' is a small, secure version.
# We name this stage 'builder' so we can refer to it later.
FROM node:18-alpine AS builder

# Set the working directory inside the container. All subsequent commands will run here.
WORKDIR /app

# Copy the package.json file first. This step gets cached by Docker. If you don't change
# your dependencies, Docker can skip re-installing them on future builds, making it much faster.
COPY package.json .

# Install all the project dependencies (like React, Lucide, etc.).
RUN npm install

# Now, copy all the other frontend source code into the container.
COPY . .

# Run the build script from your package.json. This will use esbuild to compile your
# TypeScript/JSX into a single 'bundle.js' file inside a 'dist' directory.
RUN npm run build


# --- STAGE 2: The Final Server ---
# Start from a fresh, extremely lightweight Nginx web server image.
FROM nginx:stable-alpine

# Copy ONLY the built files from the 'builder' stage into the Nginx web server's public directory.
# This keeps our final container small and secure, as it contains no source code or build tools.
COPY --from=builder /app/dist/bundle.js /usr/share/nginx/html/bundle.js
COPY index.html /usr/share/nginx/html/index.html

# Expose port 80 from the container so it can receive traffic from the proxy.
EXPOSE 80

# The default command to start the Nginx server when the container launches.
CMD ["nginx", "-g", "daemon off;"]